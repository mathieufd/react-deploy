import {
  require_lodash
} from "./chunk-LRM6PAIT.js";
import {
  require_prop_types
} from "./chunk-VRJJGK6B.js";
import {
  require_react_dom
} from "./chunk-H7EAJUYY.js";
import {
  require_react
} from "./chunk-UKYHO4H7.js";
import "./chunk-ESWOC2WW.js";
import {
  __commonJS
} from "./chunk-J43GMYXM.js";

// node_modules/eventlistener/eventlistener.js
var require_eventlistener = __commonJS({
  "node_modules/eventlistener/eventlistener.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(factory);
      } else if (typeof exports === "object") {
        module.exports = factory();
      } else {
        root.eventListener = factory();
      }
    })(exports, function() {
      function wrap(standard, fallback) {
        return function(el, evtName, listener, useCapture) {
          if (el[standard]) {
            el[standard](evtName, listener, useCapture);
          } else if (el[fallback]) {
            el[fallback]("on" + evtName, listener);
          }
        };
      }
      return {
        add: wrap("addEventListener", "attachEvent"),
        remove: wrap("removeEventListener", "detachEvent")
      };
    });
  }
});

// node_modules/lodash.throttle/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.throttle/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function throttle(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = throttle;
  }
});

// node_modules/react-lazy-load/lib/utils/parentScroll.js
var require_parentScroll = __commonJS({
  "node_modules/react-lazy-load/lib/utils/parentScroll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var style = function style2(element, prop) {
      return typeof getComputedStyle !== "undefined" ? getComputedStyle(element, null).getPropertyValue(prop) : element.style[prop];
    };
    var overflow = function overflow2(element) {
      return style(element, "overflow") + style(element, "overflow-y") + style(element, "overflow-x");
    };
    var scrollParent = function scrollParent2(element) {
      if (!(element instanceof HTMLElement)) {
        return window;
      }
      var parent = element;
      while (parent) {
        if (parent === document.body || parent === document.documentElement) {
          break;
        }
        if (!parent.parentNode) {
          break;
        }
        if (/(scroll|auto)/.test(overflow(parent))) {
          return parent;
        }
        parent = parent.parentNode;
      }
      return window;
    };
    exports.default = scrollParent;
  }
});

// node_modules/react-lazy-load/lib/utils/getElementPosition.js
var require_getElementPosition = __commonJS({
  "node_modules/react-lazy-load/lib/utils/getElementPosition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = getElementPosition;
    function getElementPosition(element) {
      var rect = element.getBoundingClientRect();
      return {
        top: rect.top + window.pageYOffset,
        left: rect.left + window.pageXOffset
      };
    }
  }
});

// node_modules/react-lazy-load/lib/utils/inViewport.js
var require_inViewport = __commonJS({
  "node_modules/react-lazy-load/lib/utils/inViewport.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = inViewport;
    var _getElementPosition = require_getElementPosition();
    var _getElementPosition2 = _interopRequireDefault(_getElementPosition);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isHidden = function isHidden2(element) {
      return element.offsetParent === null;
    };
    function inViewport(element, container, customOffset) {
      if (isHidden(element)) {
        return false;
      }
      var top = void 0;
      var bottom = void 0;
      var left = void 0;
      var right = void 0;
      if (typeof container === "undefined" || container === window) {
        top = window.pageYOffset;
        left = window.pageXOffset;
        bottom = top + window.innerHeight;
        right = left + window.innerWidth;
      } else {
        if (!inViewport(container, window, customOffset))
          return false;
        var containerPosition = (0, _getElementPosition2.default)(container);
        top = containerPosition.top;
        left = containerPosition.left;
        bottom = top + container.offsetHeight;
        right = left + container.offsetWidth;
      }
      var elementPosition = (0, _getElementPosition2.default)(element);
      return top <= elementPosition.top + element.offsetHeight + customOffset.top && bottom >= elementPosition.top - customOffset.bottom && left <= elementPosition.left + element.offsetWidth + customOffset.left && right >= elementPosition.left - customOffset.right;
    }
  }
});

// node_modules/react-lazy-load/lib/LazyLoad.js
var require_LazyLoad = __commonJS({
  "node_modules/react-lazy-load/lib/LazyLoad.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _reactDom = require_react_dom();
    var _eventlistener = require_eventlistener();
    var _lodash = require_lodash();
    var _lodash2 = _interopRequireDefault(_lodash);
    var _lodash3 = require_lodash2();
    var _lodash4 = _interopRequireDefault(_lodash3);
    var _parentScroll = require_parentScroll();
    var _parentScroll2 = _interopRequireDefault(_parentScroll);
    var _inViewport = require_inViewport();
    var _inViewport2 = _interopRequireDefault(_inViewport);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self2, call) {
      if (!self2) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self2;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var LazyLoad = function(_Component) {
      _inherits(LazyLoad2, _Component);
      function LazyLoad2(props) {
        _classCallCheck(this, LazyLoad2);
        var _this = _possibleConstructorReturn(this, (LazyLoad2.__proto__ || Object.getPrototypeOf(LazyLoad2)).call(this, props));
        _this.lazyLoadHandler = _this.lazyLoadHandler.bind(_this);
        if (props.throttle > 0) {
          if (props.debounce) {
            _this.lazyLoadHandler = (0, _lodash2.default)(_this.lazyLoadHandler, props.throttle);
          } else {
            _this.lazyLoadHandler = (0, _lodash4.default)(_this.lazyLoadHandler, props.throttle);
          }
        }
        _this.state = { visible: false };
        return _this;
      }
      _createClass(LazyLoad2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this._mounted = true;
          var eventNode = this.getEventNode();
          this.lazyLoadHandler();
          if (this.lazyLoadHandler.flush) {
            this.lazyLoadHandler.flush();
          }
          (0, _eventlistener.add)(window, "resize", this.lazyLoadHandler);
          (0, _eventlistener.add)(eventNode, "scroll", this.lazyLoadHandler);
          if (eventNode !== window)
            (0, _eventlistener.add)(window, "scroll", this.lazyLoadHandler);
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate() {
          if (!this.state.visible) {
            this.lazyLoadHandler();
          }
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(_nextProps, nextState) {
          return nextState.visible;
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._mounted = false;
          if (this.lazyLoadHandler.cancel) {
            this.lazyLoadHandler.cancel();
          }
          this.detachListeners();
        }
      }, {
        key: "getEventNode",
        value: function getEventNode() {
          return (0, _parentScroll2.default)((0, _reactDom.findDOMNode)(this));
        }
      }, {
        key: "getOffset",
        value: function getOffset() {
          var _props = this.props, offset = _props.offset, offsetVertical = _props.offsetVertical, offsetHorizontal = _props.offsetHorizontal, offsetTop = _props.offsetTop, offsetBottom = _props.offsetBottom, offsetLeft = _props.offsetLeft, offsetRight = _props.offsetRight, threshold = _props.threshold;
          var _offsetAll = threshold || offset;
          var _offsetVertical = offsetVertical || _offsetAll;
          var _offsetHorizontal = offsetHorizontal || _offsetAll;
          return {
            top: offsetTop || _offsetVertical,
            bottom: offsetBottom || _offsetVertical,
            left: offsetLeft || _offsetHorizontal,
            right: offsetRight || _offsetHorizontal
          };
        }
      }, {
        key: "lazyLoadHandler",
        value: function lazyLoadHandler() {
          if (!this._mounted) {
            return;
          }
          var offset = this.getOffset();
          var node = (0, _reactDom.findDOMNode)(this);
          var eventNode = this.getEventNode();
          if ((0, _inViewport2.default)(node, eventNode, offset)) {
            var onContentVisible = this.props.onContentVisible;
            this.setState({ visible: true }, function() {
              if (onContentVisible) {
                onContentVisible();
              }
            });
            this.detachListeners();
          }
        }
      }, {
        key: "detachListeners",
        value: function detachListeners() {
          var eventNode = this.getEventNode();
          (0, _eventlistener.remove)(window, "resize", this.lazyLoadHandler);
          (0, _eventlistener.remove)(eventNode, "scroll", this.lazyLoadHandler);
          if (eventNode !== window)
            (0, _eventlistener.remove)(window, "scroll", this.lazyLoadHandler);
        }
      }, {
        key: "render",
        value: function render() {
          var _props2 = this.props, children = _props2.children, className = _props2.className, height = _props2.height, width = _props2.width;
          var visible = this.state.visible;
          var elStyles = { height, width };
          var elClasses = "LazyLoad" + (visible ? " is-visible" : "") + (className ? " " + className : "");
          return _react2.default.createElement(this.props.elementType, {
            className: elClasses,
            style: elStyles
          }, visible && _react.Children.only(children));
        }
      }]);
      return LazyLoad2;
    }(_react.Component);
    exports.default = LazyLoad;
    LazyLoad.propTypes = {
      children: _propTypes2.default.node.isRequired,
      className: _propTypes2.default.string,
      debounce: _propTypes2.default.bool,
      elementType: _propTypes2.default.string,
      height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      offset: _propTypes2.default.number,
      offsetBottom: _propTypes2.default.number,
      offsetHorizontal: _propTypes2.default.number,
      offsetLeft: _propTypes2.default.number,
      offsetRight: _propTypes2.default.number,
      offsetTop: _propTypes2.default.number,
      offsetVertical: _propTypes2.default.number,
      threshold: _propTypes2.default.number,
      throttle: _propTypes2.default.number,
      width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      onContentVisible: _propTypes2.default.func
    };
    LazyLoad.defaultProps = {
      elementType: "div",
      debounce: true,
      offset: 0,
      offsetBottom: 0,
      offsetHorizontal: 0,
      offsetLeft: 0,
      offsetRight: 0,
      offsetTop: 0,
      offsetVertical: 0,
      throttle: 250
    };
  }
});

// dep:react-lazy-load
var react_lazy_load_default = require_LazyLoad();
export {
  react_lazy_load_default as default
};
//# sourceMappingURL=react-lazy-load.js.map
